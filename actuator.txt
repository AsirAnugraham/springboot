Spring Boot Actuator

*Spring Boot Actuator is a sub-project of the Spring Boot Framework. 
*It includes a number of additional features that help us to monitor and manage the Spring Boot application. 
*It contains the actuator endpoints (the place where the resources live).
* We can use HTTP and JMX endpoints to manage and monitor the Spring Boot application. 
*If we want to get production-ready features in an application, we should use the Spring Boot actuator.

Spring Boot Actuator Features
There are three main features of Spring Boot Actuator:

-Endpoints

-Metrics

-Audit

Endpoint: The actuator endpoints allows us to monitor and interact with the application. 
*Spring Boot provides a number of built-in endpoints. We can also create our own endpoint. 
*We can enable and disable each endpoint individually. 
*Most of the application choose HTTP, where the Id of the endpoint, along with the prefix of /actuator, is mapped to a URL.

We can enable actuator by injecting the dependency spring-boot-starter-actuator in the pom.xml file.


<dependency>  
    <groupId>org.springframework.boot</groupId>  
    <artifactId>spring-boot-starter-actuator</artifactId>  
    <version>2.2.2.RELEASE</version>  
</dependency>  

Spring Boot Actuator Endpoints

The actuator endpoints allow us to monitor and interact with our Spring Boot application. 
*Spring Boot includes number of built-in endpoints and we can also add custom endpoints in Spring Boot application.

Spring Boot enables security for all actuator endpoints. 
*It uses form-based authentication that provides user Id as the user and a randomly generated password. 
*We can also access actuator-restricted endpoints by customizing basicauth security to the endpoints. 
*We need to override this configuration by management.security.roles property.

