Microservices

Microservice architectures are the ‘new normal’. 

-Building small, self-contained, ready to run applications can bring great flexibility and added resilience to your code. 

-Spring Boot’s many purpose-built features make it easy to build and run your microservices in production at scale. 

-And don’t forget, no microservice architecture is complete without Spring Cloud ‒ easing administration and boosting your fault-tolerance.

The microservice defines an approach to the architecture that divides an application into a pool of loosely coupled services that implements business requirements. 

-It is next to Service-Oriented Architecture (SOA). 

-The most important feature of the microservice-based architecture is that it can perform continuous delivery of a large and complex application.

Microservice helps in breaking the application and build a logically independent smaller applications. 

-For example, we can build a cloud application with the help of Amazon AWS with minimum efforts.

Principles of Microservices
There are the following principles of Microservices:

-Single Responsibility principle
-Modelled around business domain
-Isolate Failure
-Infrastructure automation
-Deploy independently
-Single Responsibility Principle

*The single responsibility principle states that a class or a module in a program should have only one responsibility. 
*Any microservice cannot serve more than one responsibility, at a time.

Modeled around business domain
*Microservice never restrict itself from accepting appropriate technology stack or database. 
*The stack or database is most suitable for solving the business purpose.

Isolated Failure
*The large application can remain mostly unaffected by the failure of a single module. 
*It is possible that a service can fail at any time. So, it is important to detect failure quickly, if possible, automatically restore failure.

Infrastructure Automation
*The infrastructure automation is the process of scripting environments. 
*With the help of scripting environment, we can apply the same configuration to a single node or thousands of nodes. 
*It is also known as configuration management, scripted infrastructures, and system configuration management.

Deploy independently
*Microservices are platform agnostic. 
*It means we can design and deploy them independently without affecting the other services.

